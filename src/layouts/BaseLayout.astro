---
// Fonts
import "@fontsource/pacifico";
import "@fontsource/atkinson-hyperlegible";
import "@fontsource/iosevka-aile";
// Styles
import "../styles/global.css";

import Header from "~/components/Header.astro";

interface Props {
  title: string;
  author?: string;
  description?: string;
}

const { title, author = "Sal Hasan", description = "" } = Astro.props;
---

<!doctype html>
<html transition:animate="none" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge, chrome=1" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="author" content={author} />
    <meta name="description" content={description} />
  </head>
  <body class="max-w-135 mx-auto">
    <Header />
    <main>
      <slot />
    </main>
  </body>
</html>

<!-- Theme Preference -->
<script is:inline>
  function updateTheme() {
    const theme =
      localStorage.getItem("theme") ??
      (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
    const isDark = theme === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  }

  updateTheme();
  document.addEventListener("astro:after-swap", updateTheme);

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });
  }
</script>
